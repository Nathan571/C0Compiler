/* Copyright (c) 2016, Shianqi, Inc.
 * All rights reserved.
 */


PARSER_BEGIN(Compiler)

/** Simple brace matcher. */
public class Compiler {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Compiler parser = new Compiler(System.in);
    parser.procedure();
  }

}

PARSER_END(Compiler)

/** 空字符过滤*/
SKIP:
{
" " | "\t" | "\n" | "\r"
}

/** TOKEN定义 */
TOKEN:
{
    <IF_TO : "if">
    |
    <INT_TO : "int">
    |
    <VOID_TO : "void">
    |
    <ELSE_TO : "else">
    |
    <MAIN_TO : "main">
    |
    <WHILE_TO : "while">
    |
    <SCANF_TO : "scanf">
    |
    <PRINTF_TO : "printf">
    |
    <RETURN_TO : "return">
    |
    <ID_TO : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
    |
    <NUM_TO : (["0"-"9"])+>
    |
    <DOUHAO_TO: ",">
    |
    <FENHAO_TO: ";">
    |
    <JIAHAO_TO: "+">
    |
    <JIANHAO_TO: "-">
    |
    <CHENGHAO_TO: "*">
    |
    <CHUHAO_TO: "/">
    |
    <DENGHAO_TO: "=">
    |
    <LBRACE_TO: "{">
    |
    <RBRACE_TO: "}">
    |
    <LPARENTHESES_TO: "(">
    |
    <RPARENTHESES_TO: ")">
}

/** 程序入口. */
void procedure() :
{}
{
    //[<变量定义部分>] {<自定义函数定义部分>} <主函数>
    [LOOKAHEAD(2)VarDefinition_CC()] ( LOOKAHEAD(2)FunctionDefinition_CC() )* MainFunction_CC() <EOF>
}

/** 变量定义部分. */
void VarDefinition_CC() :
{}
{
    //int id {, id};
    <INT_TO> <ID_TO> (<DOUHAO_TO> <ID_TO>)* <FENHAO_TO>
}

/** 自定义函数定义部分. */
void FunctionDefinition_CC() :
{

}
{
    //( int id | void id) '(' ')' <分程序>
    (<INT_TO> <ID_TO> | <VOID_TO> <ID_TO>) <LPARENTHESES_TO> <RPARENTHESES_TO> PartProgram_CC()
}

/** 主函数部分 */
void MainFunction_CC() :
{}
{
    //void main'(' ')' <分程序>
    <VOID_TO> <MAIN_TO> <LPARENTHESES_TO> <RPARENTHESES_TO> PartProgram_CC()
}

/** 分程序 */
void PartProgram_CC():
{}
{
    //'{' [<变量定义部分>] <语句序列> '}'
    <LBRACE_TO> [LOOKAHEAD(2)VarDefinition_CC()] WordList_CC() <RBRACE_TO>
}

/** 语句序列 */
void WordList_CC():
{}
{
    //<语句> {<语句>}
    Word_CC()(Word_CC())*
}

/** 语句 */
void Word_CC():
{}
{
    //<条件语句>｜<循环语句> | '{'<语句序列>'}' | <自定义函数调用语句> |
    //<赋值语句> | <返回语句> | <读语句> | <写语句> | ;
    IfWord_CC()
    |
    ForWord_CC()
    |
    <LBRACE_TO> WordList_CC() <RBRACE_TO>
    |
    LOOKAHEAD(2)DefinitionFunctionCallWord_CC()
    |
    EvaluateWord_CC()
    |
    ReturnWord_CC()
    |
    ScanfWord_CC()
    |
    PrintfWord_CC()
    |
    <FENHAO_TO>
}

/** 条件语句 */
void IfWord_CC():
{}
{
    //if '('<表达式>')' <语句> [else <语句> ]
    <IF_TO> <LPARENTHESES_TO> Expression_CC() <RPARENTHESES_TO> Word_CC() [LOOKAHEAD(2) <ELSE_TO> Word_CC()]
}

/** 循环语句 */
void ForWord_CC():
{}
{
    //while '(' <表达式>')' <语句>
    <WHILE_TO> <LPARENTHESES_TO> Expression_CC() <RPARENTHESES_TO> Word_CC()
}

/** 自定义函数调用语句 */
void DefinitionFunctionCallWord_CC():
{}
{
    //<自定义函数调用>
    FunctionDefinition_CC()
}

/** 赋值语句 */
void EvaluateWord_CC():
{}
{
    //id = <表达式>;
    <ID_TO> <DENGHAO_TO> Expression_CC() <FENHAO_TO>
}

/** 返回语句 */
void ReturnWord_CC():
{}
{
    //return ['(' <表达式> ')'] ;
    <RETURN_TO> [<LPARENTHESES_TO> Expression_CC() <RPARENTHESES_TO>] <FENHAO_TO>
}

/** 读语句 */
void ScanfWord_CC():
{}
{
    //scanf '(' id ')';
    <SCANF_TO> <LPARENTHESES_TO> <ID_TO> <RPARENTHESES_TO> <FENHAO_TO>
}

/** 写语句 */
void PrintfWord_CC():
{}
{
    // printf '(' [ <表达式>] ')';
    <PRINTF_TO> <LPARENTHESES_TO> [Expression_CC()] <RPARENTHESES_TO> <FENHAO_TO>
}

/** 表达式 */
void Expression_CC():
{}
{
    //[+｜-] <项> { (+｜-) <项>}
    [<JIAHAO_TO>|<JIANHAO_TO>] Sum_CC() ( (<JIAHAO_TO>|<JIANHAO_TO>) Sum_CC())*
}

/** 项 */
void Sum_CC():
{}
{
    //<因子>｛(*｜/) <因子>｝
    Divisor_CC() ((<CHENGHAO_TO> | <CHUHAO_TO>) Divisor_CC())*
}

/** 因子 */
void Divisor_CC():
{}
{
    //id｜'(' <表达式>')' | num | <自定义函数调用>
    LOOKAHEAD(2)DefinitionFunction_CC()
    |
    <LPARENTHESES_TO> Expression_CC() <RPARENTHESES_TO>
    |
    <NUM_TO>
    |
    LOOKAHEAD(2)<ID_TO>
}

/** 自定义函数调用 */
void DefinitionFunction_CC():
{}
{
    //id '(' ')'
    <ID_TO> <LPARENTHESES_TO> <RPARENTHESES_TO>
}